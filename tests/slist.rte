var null = fn { return new ⟨⟩; };
var push = fn data, take list {
  return new ⟨ data, take list ⟩;
};
var head = fn list {
  match *list
  | case ⟨hd, tl⟩:
    return hd;
};
var tail = fn list {
  match *list
  | case ⟨hd, tl⟩:
    return tl;
};
var remove_last = fn borrow n {
  match *n
  | case ⟨data, borrow p⟩: { // n -> p
      match *p
      | case ⟨last_data , q⟩:
        match *q
        | case ⟨_, _⟩:      // n -> p -> q -> ...
          return remove_last(p);
        | case ⟨⟩:         // n -> p -> ⟨⟩
          n := ⟨data, null()⟩;
          return last_data;
      | case ⟨⟩:  // n -> ⟨⟩
        return 0;
    }      
  | case ⟨⟩:
    return 0;
};
var one_two = take push(1, push(2, null()));
var two = remove_last(one_two);
return head(one_two) + 1 - two;
