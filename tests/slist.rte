type pointer = (some: ?* | null: ⟨⟩);

fun null() -> pointer { return tag null(⟨⟩) as pointer; }
fun is_null(let p : pointer) {
  match (p) {
    case null(t):
      return true;
    case some(q):
      return false;
  }
}
fun some(var p : ?*) -> pointer { return tag some(p) as pointer; }

fun listof(let data) {
  return some(&{data = data, next = null()});
}

fun push(let data, var list) {
  return some(&{data = data, next = list});
}

fun data(let node) {
  match (node) {
  case null(w):
    return 0; // raise an exception instead?
  case some(n):
    return (*n).data;
  }
}

fun is_last(let node) {
  match (node) {
  case null(w):
    return false;
  case some(n):
    return is_null((*n).next);
  }
}

// Split the list into two parts, with the second
// part just containing the last element.
fun remove_last(inout n) {
  match (n) {
  case null(q):
    return null();
  case some(inout node):
    if (is_last((*node).next)) {
      var q = copy((*node).next);
      (*node).next = null();
      return q;
    } else {
      return remove_last((*n).next);
    }
  }
}

fun main() {
  var one_two = push(1, listof(2));
  var two_null = remove_last(one_two);
  let one = data(one_two);
  let two = data(two_null);
  return one + one - two;
}
