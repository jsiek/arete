interface Monoid(T) {
  combine : (T,T) -> T;
  identity : T;
}

fun add(x:int, y:int) -> int {
  return x + y;
}

let zero: int = 0;

fun sum<T>(A: [T]) -> T Monoid(T) {
  var i:int = 0;
  var total:T = copy(identity);
  while (i != len(A)) {
    total = combine(total, A[i]);
    i = i + 1;
  }
  return total;
}

impl Monoid(int) {
  combine = add;
  identity = zero;
}

fun main() {
  let n:int = 5;
  var A: [int] = [n of 0];
  var i:int = 0;
  while (i != n) {
    A[i] = i; 
    i = i + 1;
  }
  return sum(A) - n*(n - 1)/2;
}

