// permissions
const none = 0;
const half = 1/2;
const all = 1;

const head = 0;
const tail = 1;

type option = (some: ? | empty: ⟨⟩);
fun empty() { return tag empty(⟨⟩) as option; }
fun some(var x) { return tag some(x) as option; }

fun listof(let dat) {
  var n = &some(⟨dat, &empty(), &empty()⟩);
  return split(n);
}

fun data(ref n) {
  return (*n)#some[0];
}

fun next(ref n) & {
  return (*n)#some[2];
}

fun prev(ref n) & {
  return (*n)#some[1];
}

fun push(let dat, var lst) {
  var first  = &some(⟨dat, &empty(), &empty()⟩);
  if (lst[head] == lst[tail]) { // lst is a 1 element list
    var n = copy(join(lst[head], lst[tail]));
    prev(n) = none of first;
    next(first) = half of n;
    prev(n) <- half of first;
    lst[head] = first;
    lst[tail] = n;
    return lst;
  } else { // lst has at least 2 elements
    lst[head] <- all of prev(next(lst[head]));
    prev(lst[head]) = none of first;
    prev(next(lst[head])) <- half of lst[head];
    next(first) = all of lst[head];
    prev(next(first)) <- half of first;
    lst[head] = first;
    return lst;
  }
}

fun delete_list(var lst) {
  if (lst[head] == lst[tail]) { // lst is a 1 element list
    var n = copy(join(lst[head], lst[tail]));
    delete n;
  } else {
    lst[head] <- all of prev(next(lst[head]));
    var nxt = copy(next(lst[head]));
    delete lst[head];
    lst[head] = nxt;
    ! delete_list(lst);
  }
}

fun main() {
  var three = listof(3);
  var two_three = push(2, three);
  var one_two_three = push(1, two_three);
  let one = data(one_two_three[head]);
  ! delete_list(one_two_three);
  return one - 1;
}
