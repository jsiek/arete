var front = 0;
var back = 1;
var data = 0;
var prev = 1;
var next = 2;
var listof = function data {
  var !p = new data, null, null;
  return split(p);
};
var push = function data, !lst {
  var !first = new data , null , null;
  if lst[front] == lst[back] then { // lst is a 1 element list
    /*
      first: * -1-> [ A , / , / ]
      
      lst: * -> [ * , * ]
                  |.5 |.5
                  V   V
		  [ B , / , / ]
    */
    var !n = join(lst[front], lst[back]);
    delete lst;
    n @ prev = first;
    first <= 1 of n[prev];
    first @ next = n;
    n <= 1/2 of first[next];
    n[prev] <= 1/2 of first;
    /*
      first: *-.5-> [ A , / , * ]
                    ^         |
                    |.5       |.5
      n: -.5-> [ B, * , / ]<--|
    */
    return new !first, !n;
  } else { // lst has at least 2 elements
    /*
      first: *-1-> [ E, / , / ]
      
      lst: *-1->[ * , * ]
		.5|  .5\____________________________
		  |           /--.5---             |
		  V           V       \            V
		  [ A , / , * ]  [ B , * , * ] ... [ Z , * , / ]
		            |___/          |             |   
			      .5            \-.5->  <-.5-/
     */
    lst[front] <= 1 of lst[front][next][prev];
    lst[front] @ prev = first;
    first <= 1 of lst[front][prev];
    lst[front][next][prev] <= 1/2 of lst[front];
    first @ next = lst[front];
    first[next][prev] <= 1/2 of first;
    var !new_lst = new !first, !lst[back];
    delete lst;
    /*
      new_list: *-1-> [ * , * ]
                      .5|   \____.5________________________________
			V                                         |
	              [ E, / , * ]                                |
				 |           |--.5---             |
				 V           V       \            V
				 [ A , * , * ]  [ B , * , * ] ... [ Z , * , / ]
			                   |   /          |             |
				           \-.5           \-.5->   <-.5-/
     */
    return new_lst;
  }
};

var check_nodes_permissions = function !node {
  if not is_null(node[next]) then {
    assert permission(node[next]) == 1/2;
    check_nodes_permissions(node[next]);
  } else {}
  if not is_null(node[prev]) then {
    assert permission(node[prev]) == 1/2;
  } else {}
};
var check_list_permissions = function !list {
  var !first = list[front];
  var !last = list[back];
  assert permission(first) == 1/2;
  assert permission(last) == 1/2;
  check_nodes_permissions(first);
};

var delete_nodes = function !node, !last {
  if node == last then {
    delete join(node, last);
  } else {
    node <= 1 of node[next][prev];
    delete_nodes(node[next], last);
    delete node;
  }
};
var delete_list = function !list {
  delete_nodes(list[front], list[back]);
  delete list;
};

var three = listof(3);
check_list_permissions(three);
var two_three = push(2, three);
check_list_permissions(two_three);
var one_two_three = push(1, two_three);
check_list_permissions(one_two_three);
var one = one_two_three[front][data];
delete_list(one_two_three);
return one - 1;
