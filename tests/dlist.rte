var front = 0;
var back = 1;
var data = 0;
var prev = 1;
var next = 2;
var none = 0;
var half = 1/2;
var all = 1;
var listof = function data {
  var !p = new data, null, null;
  return split(p);
};
var push = function data, !lst {
  var !first = new data , null , null;
  if lst[front] == lst[back] { // lst is a 1 element list
    /*
      first: * -1-> [ A , / , / ]
      
      lst: * -> [ * , * ]
                  |.5 |.5
                  V   V
		  [ B , / , / ]
    */
    var !n = all of join(lst[front], lst[back]);
    n[prev] = none of first;
    first[next] = half of n;
    n[prev] <- half of first;
    /*
      first: *-.5-> [ A , / , * ]
                    ^         |
                    |.5       |.5
      n: -.5-> [ B, * , / ]<--|
    */
    lst[front] = all of first;
    lst[back] = all of n;
    return lst;
  } else { // lst has at least 2 elements
    /*
      first: *-1-> [ A, / , / ]
      
      lst: *-1->[ * , * ]
		.5|  .5\____________________________
		  |           ___.5___             |
		  V           V       \            V
		  [ B , / , * ]  [ C , * , * ] ... [ Z , * , / ]
		            |    ^         |             |
		            |___/          |             |   
			      .5            \-.5->  <-.5-/
     */
    lst[front] <- all of lst[front][next][prev];
    lst[front][prev] = none of first;
    lst[front][next][prev] <- half of lst[front];
    first[next] = all of lst[front];
    first[next][prev] <- half of first;
    lst[front] = all of first;
    /*
           lst: *-1-> [ * , * ]
                      .5|   \____.5_______________________________
			V                                         |
	              [ A, / , * ]                                |
				 |           |--.5---             |
				 V           V       \            V
				 [ B , * , * ]  [ C , * , * ] ... [ Z , * , / ]
				           |    ^         |             |
			                   |    |         |             |
				           \-.5-/         \-.5->   <-.5-/
     */
    return lst;
  }
};

var check_nodes_permissions = function node {
  if not is_null(node[next]) {
    assert permission(node[next]) == half;
    check_nodes_permissions(all of node[next]);
  }
  if not is_null(node[prev]) {
    assert permission(node[prev]) == half;
  }
};
var check_list_permissions = function list {
  var first = all of list[front];
  var last = all of list[back];
  assert permission(first) == half;
  assert permission(last) == half;
  check_nodes_permissions(all of first);
};

var delete_nodes = function node, last {
  if node == last {
    delete join(node, last);
  } else {
    node <- all of node[next][prev];
    delete_nodes(all of node[next], all of last);
    delete node;
  }
};
var delete_list = function !list {
  delete_nodes(all of list[front], all of list[back]);
  delete list;
};

var three = all of listof(3);
check_list_permissions(all of three);
var two_three = all of push(2, all of three);
check_list_permissions(all of two_three);
var one_two_three = push(1, all of two_three);
check_list_permissions(all of one_two_three);
var one = one_two_three[front][data];
delete_list(all of one_two_three);
return one - 1;
