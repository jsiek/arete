// permissions
const none = 0;
const half = 1/2;
const all = 1;

fun listof(dat) {
  def !p = new ⟨dat, null, null⟩;
  return split(p);
}

fun front(lst) & {
  return lst[0];
}

fun back(lst) & {
  return lst[1];
}

fun data(node) & {
  return (*node)[0];
}

fun prev(node) & {
  return (*node)[1];
}

fun next(node) & {
  return (*node)[2];
}

fun push(dat, !lst) {
  def !first = new ⟨dat, null, null⟩;
  if (front(lst) == back(lst)) { // lst is a 1 element list
    def !n = copy(join(lst[0], lst[1]));
    prev(all of n) = none of first;
    next(all of first) = half of n;
    (*n)[1] <- half of first;
    front(all of lst) = all of first;
    back(all of lst) = all of n;
    return lst;
  } else { // lst has at least 2 elements
    lst[0] <- all of (*((*(lst[0]))[2]))[1];
    (*front(all of lst))[1] = none of first;
    (*((*(lst[0]))[2]))[1] <- half of lst[0];
    next(all of first) = front(all of lst);
    (*((*first)[2]))[1] <- half of first;
    front(all of lst) = all of first;
    return lst;
  }
}

fun check_nodes_permissions(node) {
  if (not is_null(node)) {
    if (not is_null(next(node))) {
      assert permission((*node)[2]) == half;
      ! check_nodes_permissions(next(all of node));
    }
    if (not is_null(prev(node))) {
      assert permission((*node)[1]) == half;
    }
  }
}

fun check_list_permissions(list) {
  def first = copy(front(all of list));
  def last = copy(back(all of list));
  assert permission(first) == half;
  assert permission(last) == half;
  ! check_nodes_permissions(all of first);
}

fun delete_nodes(node, last) {
  if (not is_null(node)) {
    if (node == last) {
      delete join(node, last);
    } else {
      node <- all of (*((*node)[2]))[1];
      ! delete_nodes(copy(next(all of node)), all of last);
      delete node;
    }
  }
}

fun delete_list(!list) {
  ! delete_nodes(copy(front(all of list)),
                 copy(back(all of list)));
}

fun main() {
  def !three = listof(3);
  def !two_three = push(2, three);
  def !one_two_three = push(1, two_three);
  ! check_list_permissions(all of one_two_three);
  def one = copy(data(front(one_two_three)));
  ! delete_list(one_two_three);
  return one - 1;
}
