fun split_array(array) {
  def half = len(array) % 2;
  def !left = [half of 0];
  def !right = [len(array) - half of 0];
  var i = 0;
  while (i < half) {
    left[i] = array[i];
    i = i + 1;
  }
  while (i < len(array)) {
    right[i - half] = array[i];
    i = i + 1;
  }
  return âŸ¨1 of left, 1 of rightâŸ©;
}

fun merge(array1, array2) {
  def !result = [len(array1) + len(array2) of 0];
  var i = 0; var j = 0; var k = 0;
  while (j < len(array1) and k < len(array2)) {
    if (array1[j] <= array2[k]) {
      result[i] = array1[j];
      j = j + 1;
    } else {
      result[i] = array2[k];
      k = k + 1;
    }
    i = i + 1;
  }
  while (j < len(array1)) {
    result[i] = array1[j];
    j = j + 1;
    i = i + 1;
  }
  while (k < len(array2)) {
    result[i] = array2[k];
    k = k + 1;
    i = i + 1;
  }
  return result;
}

fun merge_sort(array) {
  if (len(array) < 2) {
    return array;
  } else {
    def !s = split_array(array);
    def !left = merge_sort(s[0]);
    def !right = merge_sort(s[1]);
    return merge(left, right);
  }
}

fun is_sorted(array) {
  var i = 0;
  while (i < len(array) and i + 1 < len(array)) {
    if (array[i] > array[i + 1]) {
      return false;
    }
    i = i + 1;
  }
  return true;
}

fun main() {
  def !a = [11 of 0];
  var i = 0;
  while (i < len(a)) {
    a[i] = len(a) - i;
    i = i + 1;
  }
  def !b = merge_sort(a);
  if (is_sorted(b)) {
    return 0;
  } else {
    return 1;
  }
}
