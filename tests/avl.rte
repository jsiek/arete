// AVL Tree (UNDER CONSTRUCTION)
// tree layout: pointer to root
const root = 0;
// node layout: pointer to ⟨data, left, right, parent, height⟩
const data = 0;
const left = 1;
const right = 2;
const parent = 3;
const height = 4;

typeop option(T) = (some: T | empty: ⟨⟩);
fun empty() -> option(?) { return tag empty(⟨⟩) as option(?); }
fun some<T>(ref x : T) -> option(T) { return tag some(x) as option(T); }

type node_opt = rec X in option(⟨int, X, X, X, int⟩*);
type node_t = ⟨int, node_opt, node_opt, node_opt, int⟩;
type tree_t = node_opt*;

// Common fractions
const none = 0/1;
const half = 1/2;
const all = 1/1;

fun find(let key: int, ref node: node_t*) -> node_t* {
  if (key < (*node)[data]) {
    match ((*node)[left]) {
    case empty(_):
      return node;
    case some(ref l):
      return find(key, copy(l));
    }	
  } else if ((*node)[data] < key) {
    match ((*node)[right]) {
    case empty(_):
      return node;
    case some(ref r):
      return find(key, copy(r));
    }	
  } else {
    return node;
  }
}

fun gather_permission(inout node: node_t*) {
  match ((*node)[left]) {
  case empty(_): {}
  case some(ref l):
    match ((*l)[parent]) {
    case empty(_): {}
    case some(ref p):
      node <- all of p;
    }
  }
  match ((*node)[right]) {
  case empty(_): {}
  case some(ref r):
    match ((*r)[parent]) {
    case empty(_): {}
    case some(ref p):
      node <- all of p;
    }
  }
  assert permission(node) == 1/1;
}

fun scatter_permission(inout node: node_t*) {
  match ((*node)[left]) {
  case empty(_): {}
  case some(ref l):
    match ((*l)[parent]) {
    case empty(_): {}
    case some(inout p):
      p <- half of node;
    }
  }
  match ((*node)[right]) {
  case empty(_): {}
  case some(ref r):
    match ((*r)[parent]) {
    case empty(_): {}
    case some(inout p):
      p <- half of node;
    }
  }
}

fun set_left(ref node: node_t*, var new_left: node_t*) {
  (*new_left)[parent] = some(node);
  node <- all of (*new_left)[parent]#some;
  (*node)[left] = some(new_left);
  new_left <- half of (*node)[left]#some;
  (*new_left)[parent]#some <- 1/2 of node;
  (*node)[left]#some <- all of new_left;  
}

fun set_right(inout node: node_t*, var new_right: node_t*) {
  (*new_right)[parent] = some(node);
  node <- all of (*new_right)[parent]#some;
  (*node)[right] = some(new_right);
  new_right <- half of (*node)[right]#some;
  (*new_right)[parent]#some <- 1/2 of node;
  (*node)[right]#some <- all of new_right;
}

fun insert(let key: int, inout tree: tree_t) {
  match (*tree) {
  case empty(_):
    *tree = some(&⟨key, empty(), empty(), empty(), 0⟩);
  case some(inout top_node):
    var node: node_t* = find(key, top_node);
    if (key < (*node)[data]) {
      var new_node: node_t* = &⟨key, empty(), empty(), empty(), 0⟩;
      gather_permission(node);
      set_left(node, new_node);
      scatter_permission(node);
    }
    if ((*node)[data] < key) {
      var new_node: node_t* = &⟨key, empty(), empty(), empty(), 0⟩;
      gather_permission(node);
      set_right(node, new_node);
      scatter_permission(node);
    }
  }
}

fun delete_node(var node: node_opt) {
  match (node) {
  case empty(_): {}
  case some(var n): 
    gather_permission(n);
    delete_node(copy((*n)[left]));
    delete_node(copy((*n)[right]));
    delete n;
  }
}

fun delete_tree(var tree: tree_t) {
  delete_node(copy(*tree));
  delete tree;
}

fun main() {
  var tree : tree_t = &empty();
  insert(5, tree);
  insert(10, tree);
  insert(1, tree);
  let ten = (let n: node_t* = find(10, (*tree)#some)
             in copy((*n)[data]));
  delete_tree(tree);
  return ten - 10;
}
