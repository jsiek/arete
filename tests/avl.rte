// AVL Tree (UNDER CONSTRUCTION)
// tree layout: [root]
var root = 0;
// node layout: [data, left, right, parent, height]
var data = 0;
var left = 1;
var right = 2;
var parent = 3;
var height = 4;

// Common fractions
var none = 0;
var half = 1/2;
var all = 1;

var find = function key, node, parent {
  if is_null(node) {
    return parent;
  }
  if key < node[data] {
    return find(key, all of node[left], all of node);
  }
  if node[data] < key {
    return find(key, all of node[right], all of node);
  }
  return node;
};

var gather_permission = function node {
  if not is_null(node[left]) {
    node <- 1 of node[left][parent];
  }
  if not is_null(node[right]) {
    node <- 1 of node[right][parent];
  }
  assert permission(node) == 1;
};
var scatter_permission = function node {
  if not is_null(node[left]) {
    node[left][parent] <- half of node;
  }
  if not is_null(node[right]) {
    node[right][parent] <- half of node;
  }
};

var set_left = function !node, !new_left {
  assert permission(node) == 1;
  assert permission(new_left) == 1;
  node[left] = all of new_left;
  if not is_null(new_left) {
    node[left][parent] = half of node;
  }
};
var set_right = function !node, !new_right {
  assert permission(node) == 1;
  assert permission(new_right) == 1;
  node[right] = all of new_right;
  if not is_null(node[right]) {
    node[right][parent] = half of node;
  }
};

var insert = function key, !tree {
  if is_null(tree[root]) {
    tree[root] = new key, null, null, null, 0;
  } else {
    var node = all of find(key, all of tree[root], null);
    if key < node[data] {
      var !new_node = new key, null, null, null, 0;
      gather_permission(all of node);
      set_left(all of node, all of new_node);
      scatter_permission(all of node);
    }
    if node[data] < key {
      var !new_node = new key, null, null, null, 0;
      gather_permission(all of node);
      set_right(all of node, all of new_node);
      scatter_permission(all of node);
    }
  }
};

var delete_node = function node {
  if not is_null(node) {
    gather_permission(all of node);
    delete_node(all of node[left]);
    delete_node(all of node[right]);
    delete node;
  }
};
var delete_tree = function !tree {
  delete_node(all of tree[root]);
  delete tree;
};

var !tree = new null;
insert(5, all of tree);
insert(10, all of tree);
insert(1, all of tree);
var ten = find(10, tree[root])[data];
delete_tree(all of tree);
return ten - 10;