fun write(!q, v, @signal) {
  // wait until the read has happened
  while (not upgrade(signal)) { }
  *q = v;
}

fun main() {
  let !p = new 0;
  let !signal = new 0;
  var s = signal; // take some of signal's permissions
  let f1 = future write(p, 42, signal);
  // wait for f1 to start and acquire p
  while (permission(p) > 0) { }
  let x = *p;
  s = null; // give back signal's permissions
  // write happens sometime in here
  ! await f1;
  return x;
}