// permissions
const none : rational = 0/1;
const half : rational = 1/2;
const all : rational = 1/1;

const data : int = 0;
const prev : int = 1;
const next : int = 2;

const head : int = 0;
const tail : int = 1;

type node_t = rec X in (some:⟨int, X, X⟩ | empty: ⟨⟩)*;
type list_t = ⟨node_t, node_t⟩;

type option = (some: ? | empty: ⟨⟩);
fun empty() -> option { return tag empty(⟨⟩) as option; }
fun some(var x : ?) -> option { return tag some(x) as option; }

fun listof(let dat: int) -> ⟨node_t, node_t⟩ {
  var n: node_t = &some(⟨dat, &empty(), &empty()⟩);
  return split(n);
}

fun get_data(let n: node_t) -> int {
  return (*n)#some[data];
}

fun get_next(ref n: node_t) -> node_t & {
  return (*n)#some[next];
}

fun get_prev(ref n: node_t) -> node_t & {
  return (*n)#some[prev];
}

fun set_next(inout n: node_t, ref nxt: node_t, let amount: rational) {
  match (*n) {
  case empty(q):
    exit(-1);
  case some(inout node):
    node[next] = amount of nxt; 
  }
}

fun set_prev(inout n: node_t, ref prv: node_t, let amount: rational) {
  match (*n) {
  case empty(q):
    exit(-1);
  case some(inout node):
    node[prev] = amount of prv; 
  }
}


fun push(let dat: int, var lst: list_t) -> list_t {
  var first : node_t = &some(⟨dat, &empty(), &empty()⟩);
  if (lst[head] == lst[tail]) { // lst is a 1 element list
    var n = copy(join(lst[head], lst[tail]));
    set_prev(n, first, none);
    set_next(first, n, half);
    get_prev(n) <- half of first;
    lst[head] = first;
    lst[tail] = n;
    return lst;
  } else { // lst has at least 2 elements
    lst[head] <- all of get_prev(get_next(lst[head]));
    set_prev(lst[head], first, none);
    get_prev(get_next(lst[head])) <- half of lst[head];
    set_next(first, lst[head], all);
    get_prev(get_next(first)) <- half of first;
    lst[head] = first;
    return lst;
  }
}

fun delete_list(var lst: list_t) {
  if (lst[head] == lst[tail]) { // lst is a 1 element list
    var n : node_t = copy(join(lst[head], lst[tail]));
    delete n;
  } else {
    lst[head] <- all of get_prev(get_next(lst[head]));
    var nxt : node_t = copy(get_next(lst[head]));
    delete lst[head];
    lst[head] = nxt;
    delete_list(lst);
  }
}

fun main() -> int {
  var three : list_t = listof(3);
  var two_three : list_t = push(2, three);
  var one_two_three : list_t = push(1, two_three);
  let one : int = get_data(one_two_three[head]);
  delete_list(one_two_three);
  return one - 1;
}
