// permissions
const none : rational = 0/1;
const half : rational = 1/2;
const all : rational = 1/1;

type node_t = rec X in ⟨int, X, X⟩*;
type list_t = ⟨node_t, node_t⟩;

fun listof(dat: int) -> ⟨node_t, node_t⟩ {
  let !p = new ⟨dat, null, null⟩;
  return split(p);
}

fun front(lst: list_t) -> node_t & {
  return lst[0];
}

fun back(lst: list_t) -> node_t & {
  return lst[1];
}

fun data(node: node_t) -> int & {
  return (*node)[0];
}

fun prev(node: node_t) -> node_t & {
  return (*node)[1];
}

fun next(node: node_t) -> node_t & {
  return (*node)[2];
}

fun push(dat: int, !lst: list_t) -> list_t {
  let !first: node_t = new ⟨dat, null, null⟩;
  if (front(lst) == back(lst)) { // lst is a 1 element list
    let !n: node_t = join(lst[0], lst[1]);
    prev(all of n) = none of first;
    next(all of first) = half of n;
    (*n)[1] <- half of *first;
    front(all of lst) = all of first;
    back(all of lst) = all of n;
    return lst;
  } else { // lst has at least 2 elements
    lst[0] <- all of lst[0][2][1];
    (*front(all of lst))[1] = none of first;
    lst[0][2][1] <- half of lst[0];
    next(all of first) = front(all of lst);
    (*first)[2][1] <- half of *first;
    front(all of lst) = all of first;
    return lst;
  }
}

fun check_nodes_permissions(node: node_t) {
  if (not is_null(node)) {
    if (not is_null(next(node))) {
      assert permission((*node)[2]) == half;
      ! check_nodes_permissions(next(all of node));
    }
    if (not is_null(prev(node))) {
      assert permission((*node)[1]) == half;
    }
  }
}

fun check_list_permissions(list: list_t) {
  let first = copy(front(all of list));
  let last = copy(back(all of list));
  assert permission(*first) == half;
  assert permission(*last) == half;
  ! check_nodes_permissions(all of first);
}

fun delete_nodes(node: node_t, last: node_t) {
  if (not is_null(node)) {
    if (node == last) {
      delete join(*node, *last);
    } else {
      *node <- all of (*node)[2][1];
      ! delete_nodes(copy(next(all of node)), all of last);
      delete node;
    }
  }
}

fun delete_list(!list: list_t) {
  ! delete_nodes(copy(front(all of list)),
                 copy(back(all of list)));
}

fun main() {
  let !three: list_t = listof(3);
  let !two_three: list_t = push(2, three);
  let !one_two_three: list_t = push(1, two_three);
  ! check_list_permissions(all of one_two_three);
  let one: int = copy(data(front(one_two_three)));
  ! delete_list(one_two_three);
  return one - 1;
}
