interface Semigroup(U) {
  combine : (let U, let U) -> U;
}

fun accumulate<T>(A: [T], let init: T) -> T where Semigroup(T) {
  var total:T = copy(init);
  var i:int = 0;
  while (i != len(A)) {
    total = combine(total, A[i]);
    i = i + 1;
  }
  return total;
}

interface Monoid(S) extends Semigroup(S) {
  identity : S;
}

fun sum<T>(A: [T]) -> T where Monoid(T) {
  return accumulate(A, identity);
}

fun add(x:int, y:int) -> int {
  return x + y;
}

impl Semigroup(int) {
  combine = add;
}

let zero: int = 0;

impl Monoid(int) {
  identity = zero;
}

fun main() -> int {
  let n:int = 5;
  var A: [int] = [n of 0];
  var i:int = 0;
  while (i != n) {
    A[i] = i; 
    i = i + 1;
  }
  return sum(A) - n*(n - 1)/2;
}

