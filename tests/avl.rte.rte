// AVL Tree (UNDER CONSTRUCTION)
// tree layout: [root]
def root = 0;
// node layout: [data, left, right, parent, height]
def data = 0;
def left = 1;
def right = 2;
def parent = 3;
def height = 4;

// Common fractions
def none = 0;
def half = 1/2;
def all = 1;

function find(key, node, parent) {
  if (is_null(node)) {
    return parent;
  }
  if (key < node[data]) {
    return find(key, all of node[left], all of node);
  }
  if (node[data] < key) {
    return find(key, all of node[right], all of node);
  }
  return node;
}

function gather_permission(node) {
  if (not is_null(node[left])) {
    node <- all of node[left][parent];
  }
  if (not is_null(node[right])) {
    node <- all of node[right][parent];
  }
  assert permission(node) == 1;
}

function scatter_permission(node) {
  if (not is_null(node[left])) {
    node[left][parent] <- half of node;
  }
  if (not is_null(node[right])) {
    node[right][parent] <- half of node;
  }
}

function set_left(!node, !new_left) {
  assert permission(node) == 1;
  assert permission(new_left) == 1;
  node[left] = all of new_left;
  if (not is_null(new_left)) {
    node[left][parent] = node;
  }
}

function set_right(!node, !new_right) {
  assert permission(node) == 1;
  assert permission(new_right) == 1;
  node[right] = all of new_right;
  if (not is_null(node[right])) {
    node[right][parent] = node;
  }
}

function insert(key, !tree) {
  if (is_null(tree[root])) {
    tree[root] = new key, null, null, null, 0;
  } else {
    def node = all of find(key, all of tree[root], null);
    if (key < node[data]) {
      def !new_node = new key, null, null, null, 0;
      ! gather_permission(all of node);
      ! set_left(node, new_node);
      ! scatter_permission(all of node);
    }
    if (node[data] < key) {
      def !new_node = new key, null, null, null, 0;
      ! gather_permission(all of node);
      ! set_right(node, new_node);
      ! scatter_permission(all of node);
    }
  }
}

function delete_node(node) {
  if (not is_null(node)) {
    ! gather_permission(all of node);
    ! delete_node(all of node[left]);
    ! delete_node(all of node[right]);
    delete node;
  }
}

function delete_tree(!tree) {
  ! delete_node(all of tree[root]);
}

function main() {
  def !tree = new null;
  ! insert(5, tree);
  ! insert(10, tree);
  ! insert(1, tree);
  def ten = (let t = find(10, tree[root])
             in t[data]);
  ! delete_tree(tree);
  return ten - 10;
}
