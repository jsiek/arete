type pointer = (some: ?* | none: ⟨⟩);

fun null() -> pointer { return tag none(⟨⟩) as pointer; }
fun is_null(let p : pointer) {
  match (p) {
    case none(t):
      return true;
    case some(q):
      return false;
  }
}
fun some(var p : int*) -> pointer { return tag some(p) as pointer; }

fun deref(x : pointer, default: int) -> int {
  match (x) {
    case none(t):
      return default;
    case some(p):
      return *p;
  }
}

fun main() -> int {
  var x : pointer = null();
  var y : pointer = some(&42);
  if (is_null(x)) {
    return deref(x, -42) + deref(y, 0);
  } else {
    return 1;
  }
}