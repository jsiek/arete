DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
IDENT: (UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT|/[₀₁₂₃₄₅₆₇₈₉!?]/)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+
LINECOMMENT: "//" /[^\n]*/ NEWLINE
COMMENT: /\/\*([^\*]|\*+[^\/])*\*+\//

?type: "int"                                     -> int_type
    | "rational"                                 -> rational_type
    | "bool"                                     -> bool_type
    | "void"                                     -> void_type
    | "?"                                        -> any_type
    | "[" type "]"                               -> array_type
    | type "*"                                   -> ptr_type
    | "⟨" type_list "⟩"                          -> tuple_type
    | "{" field_type_list "}"                    -> record_type
    | alternative_list                           -> variant_type
    | "(" param_type_list ")" "->" type          -> function_type
    | "rec" IDENT "in" type                      -> recursive_type
    | IDENT                                      -> type_var
    | type "(" type_list ")"                     -> type_application
    | "(" type ")"
    
?type_list:                                     -> empty
    | type                                      -> single
    | type "," type_list                         -> push

?param_type_list:                               -> empty
    | strict_binding_kind type                         -> single
    | strict_binding_kind type "," param_type_list     -> push
    
?alternative: IDENT ":" type                     -> alternative
    
?alternative_list: alternative                   -> single
    | alternative "|" alternative_list           -> push

?field_type: IDENT ":" type                      -> field_type
    
?field_type_list: field_type                     -> single
    | field_type "," field_type_list             -> push

?type_opt: ":" type                              -> just
    |                                            -> nothing

?return_mode: "&"                                -> address
    |                                            -> value

?expression: expression_logic "?" expression ":" expression    -> condition
    | binding_kind IDENT type_opt "=" expression "in" expression -> binding_exp
    | expression_logic

?expression_logic: expression_logic "and" expression_cmp       -> and
    | expression_logic "or" expression_cmp                     -> or
    | expression_cmp			                  
				                  
?expression_cmp: expression_cmp "==" expression_add            -> equal
    | expression_cmp "!=" expression_add                       -> not_equal
    | expression_cmp "<" expression_add                        -> less
    | expression_cmp ">" expression_add                        -> greater
    | expression_cmp "<=" expression_add                       -> less_equal
    | expression_cmp ">=" expression_add                       -> greater_equal
    | expression_add

?expression_add: expression_add "+" expression_med             -> add
    | expression_add "-" expression_med                        -> sub
    | expression_med

?expression_med: expression_med "div" expression_hi            -> int_div
    | expression_med "/" expression_hi                         -> div
    | expression_med "%" expression_hi                         -> mod
    | expression_med "*" expression_hi                         -> mul
    | expression_med_hi

?expression_med_hi: expression_hi
    | "*" expression_hi                                 -> deref
    | "&" expression_hi                                 -> addrof

?expression_hi: INT                                     -> int
    | "copy" "(" expression ")"                         -> copy
    | "len" "(" expression ")"                          -> len
    | "split" "(" expression ")"                        -> split
    | "join" "(" expression "," expression ")"          -> join
    | "permission" "(" expression ")"                   -> permission
    | "upgrade" "(" expression ")"                      -> upgrade
    | "breakpoint" "(" ")"                              -> breakpoint
    | "exit" "(" expression ")"                         -> exit
    | "input" "(" ")"                                   -> input
    | "print" "(" expression ")"                        -> print
    | "sqrt" "(" expression ")"                         -> sqrt
    | IDENT                                             -> var
    | expression_hi "::" IDENT                          -> module_member
    | expression_hi "#" IDENT                           -> variant_member
    | expression_hi "." IDENT                           -> record_member
    | "{" field_list "}"                                -> record
    | "-" expression_hi                                 -> neg
    | "not" expression_hi                               -> not
    | "(" expression ")"                                -> paren
    | "[" expression "of" expression "]"                -> array
    | "⟨" initializer_list "⟩"                          -> tuple
    | expression_hi "[" expression "]"                  -> index
    | expression_hi "[" expression ":" expression ":" expression "]"   -> slice
    | expression_hi "(" initializer_list ")"            -> call
    | "fun" "(" parameter_list ")" capture_opt return_mode block -> lambda
    | "true"                                            -> true
    | "false"                                           -> false
    | "spawn" expression                                -> future
    | "wait" expression_hi                              -> wait
    | "tag" IDENT "(" expression ")" "as" type          -> tag_variant

?capture_opt:                                           -> nothing
    | "[" parameter_list "]"                            -> just

?statement: expression "=" initializer ";"              -> write
    | expression "<-" expression "of" expression ";"    -> transfer
    | expression ";"                                    -> expr
    | "delete" expression ";"                           -> delete
    | "assert" expression ";"                           -> assert
    | "while" "(" expression ")" block                  -> while
    | "for" parameter "in" expression block             -> for_in
    | block
    | if_statement
    | "match" "(" expression ")" "{" case_list "}"      -> match

?if_statement: "if" "(" expression ")" block if_rest    -> if

?if_rest: "else" block                                  -> else
    | "else" "if" "(" expression ")" block if_rest      -> else_if
    |                                                   -> no_else

?statement_list: statement                              -> last_statement
    | binding_kind IDENT type_opt "=" expression ";" statement_list -> binding_stmt
    | statement statement_list                          -> seq
    | "return" expression ";"                           -> return

?block: "{" statement_list "}"                          -> block
    | "{" "}"                                           -> pass

?case: "case" IDENT "(" parameter ")" ":" statement_list -> case

?case_list: case                                        -> single
    | case case_list                                    -> push

?expression_list:                                       -> empty
    | expression                                        -> single
    | expression "," expression_list                    -> push

?initializer: expression                                -> default_initializer
    | expression "of" expression                        -> frac_initializer
				                 
?initializer_list:                                      -> empty
    | initializer                                       -> single
    | initializer "," initializer_list                  -> push
				                 
?strict_binding_kind: "let"                                    -> let
    | "var"                                             -> var
    | "inout"                                           -> inout
    | "ref"                                             -> ref

?binding_kind: strict_binding_kind
    |                                                   -> let
parameter: binding_kind IDENT type_opt                  -> binding
    | "_"                                               -> no_binding
				                 
?parameter_list:                                        -> empty
    | parameter                                         -> single
    | parameter "," parameter_list                      -> push

?ident_list:                                            -> empty
    | IDENT                                             -> single
    | IDENT "," ident_list                              -> push

?field: IDENT "=" expression                            -> field

?field_list:                                            -> empty
    | field                                             -> single
    | field "," field_list                              -> push

?ret_type: "->" type                             -> just
    |                                            -> nothing

?type_params_opt:                                -> nothing
    | "<" ident_list ">"                         -> just

?req: IDENT "(" type_list ")"             -> impl_req

?req_list:                                -> empty
    | req                                 -> single
    | req "," req_list                    -> push

?where_clause:                            -> empty
    | "where" req_list

?extends_clause:                          -> empty
    | "extends" req_list

?req_or_ident: req
    | IDENT                                             -> raw_string

?import_list:                                           -> empty
    | req_or_ident                                      -> single
    | req_or_ident "," import_list                      -> push

?definition: "let" IDENT type_opt "=" expression ";"              -> global
    | "const" IDENT type_opt "=" expression ";"                   -> constant
    | "fun" IDENT type_params_opt "(" parameter_list ")" ret_type return_mode where_clause block  -> function
    | "module" IDENT "exports" import_list "{" definition_list "}" -> module
    | "from" expression "import" import_list ";"                  -> import
    | "type" IDENT "=" type ";"                                   -> type_definition
    | "typeop" IDENT "(" ident_list ")" "=" type ";"              -> type_operator
    | "interface" IDENT "(" ident_list ")" extends_clause  "{" declaration_list "}" -> interface
    | "impl" IDENT "(" type_list ")" "{" assign_list "}"          -> implementation

?assign: IDENT "=" expression ";"                                 -> assign

?assign_list:                                                     -> empty
    | assign assign_list                                          -> push
    
?definition_list:                                                 -> empty
    | definition definition_list                                  -> push

?declaration: IDENT ":" type ";"                                  -> declaration

?declaration_list:                                                -> empty
    | declaration declaration_list                                -> push

arete: definition_list

%ignore COMMENT
%ignore LINECOMMENT
%ignore WS
