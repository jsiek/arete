DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
IDENT: (UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT|/[₀₁₂₃₄₅₆₇₈₉!?]/)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+
LINECOMMENT: "//" /[^\n]*/ NEWLINE
COMMENT: /\/\*([^\*]|\*+[^\/])*\*+\//

?type: "int"                                     -> int_type
    | "rational"                                 -> rational_type
    | "bool"                                     -> bool_type
    | "?"                                        -> any_type
    | "[" type "]"                               -> array_type
    | type "*"                                   -> ptr_type
    | "⟨" type_list "⟩"                          -> tuple_type
    | "(" type_list ")" "->" type                -> function_type
    | "rec" IDENT "in" type                      -> recursive_type
    | IDENT                                      -> type_var
    
?type_list: type                                 -> single
    | type "," type_list                         -> push

?type_opt: ":" type                              -> just
    |                                            -> nothing

?return_mode: "&"                                   -> address
    |                                            -> value

?expression: expression_logic "?" expression ":" expression    -> condition
    | binding_kind IDENT type_opt "=" expression "in" expression -> binding_exp
    | expression_logic

?expression_logic: expression_logic "and" expression_cmp       -> and
    | expression_logic "or" expression_cmp                     -> or
    | expression_cmp			                  
				                  
?expression_cmp: expression_cmp "==" expression_add            -> equal
    | expression_cmp "!=" expression_add                       -> not_equal
    | expression_cmp "<" expression_add                        -> less
    | expression_cmp ">" expression_add                        -> greater
    | expression_cmp "<=" expression_add                       -> less_equal
    | expression_cmp ">=" expression_add                       -> greater_equal
    | expression_add

?expression_add: expression_add "+" expression_med             -> add
    | expression_add "-" expression_med                        -> sub
    | expression_med

?expression_med: expression_med "%" expression_hi              -> int_div
    | expression_med "/" expression_hi                         -> div
    | expression_med "*" expression_hi                         -> mul
    | expression_med_hi

?expression_med_hi: expression_hi
    | "*" expression_hi                                 -> deref
    | "&" expression_hi                                 -> addrof

?expression_hi: INT                                     -> int
    | "copy" "(" expression ")"                         -> copy
    | "is_null" "(" expression ")"                      -> is_null
    | "null"                                            -> null
    | "len" "(" expression ")"                          -> len
    | "split" "(" expression ")"                        -> split
    | "join" "(" expression "," expression ")"          -> join
    | "permission" "(" expression ")"                   -> permission
    | "upgrade" "(" expression ")"                      -> upgrade
    | IDENT                                             -> var
    | expression_hi "[" expression "]"                  -> index
    | expression_hi "." IDENT                           -> member
    | "-" expression_hi                                 -> neg
    | "not" expression_hi                               -> not
    | "(" expression ")"                                -> paren
    | "fun" "(" parameter_list ")" return_mode block       -> lambda
    | "[" expression "of" expression "]"                -> array
    | "⟨" initializer_list "⟩"                          -> tuple
    | expression_hi "(" initializer_list ")"            -> call
    | "true"                                            -> true
    | "false"                                           -> false
    | "spawn" expression                                -> future
    | "wait" expression_hi                              -> wait

?statement: expression "=" initializer ";"              -> write
    | expression "<-" expression "of" expression ";"    -> transfer
    | "!" expression ";"                                -> expr
    | "delete" expression ";"                           -> delete
    | "assert" expression ";"                           -> assert
    | "while" "(" expression ")" block                  -> while
    | block
    | if_statement

?if_statement: "if" "(" expression ")" block if_rest    -> if

?if_rest: "else" block                                  -> else
    | "else" "if" "(" expression ")" block if_rest      -> else_if
    |                                                   -> no_else

?statement_list: statement                              -> last_statement
    | binding_kind IDENT type_opt "=" expression ";" statement_list -> binding_stmt
    | statement statement_list                          -> seq
    | "return" expression ";"                           -> return

?block: "{" statement_list "}"                          -> block
    | "{" "}"                                           -> pass

?expression_list:                                       -> empty
    | expression                                        -> single
    | expression "," expression_list                    -> push

?initializer: expression                                -> default_initializer
    | expression "of" expression                        -> frac_initializer
				                 
?initializer_list:                                      -> empty
    | initializer                                       -> single
    | initializer "," initializer_list                  -> push
				                 
?binding_kind: "let"                                    -> let
    |                                                   -> let
    | "var"                                             -> var
    | "inout"                                           -> inout
    | "ref"                                             -> ref

parameter: binding_kind IDENT type_opt                  -> binding
				                 
?parameter_list:                                     -> empty
    | parameter                                      -> single
    | parameter "," parameter_list                   -> push

?ident_list:                                     -> empty
    | IDENT                                      -> single
    | IDENT "," ident_list                       -> push

?ret_type: "->" type                             -> just
    |                                            -> nothing

?definition: "let" IDENT type_opt "=" expression ";"              -> global
    | "const" IDENT type_opt "=" expression ";"                   -> constant
    | "fun" IDENT "(" parameter_list ")" ret_type return_mode block  -> function
    | "module" IDENT "exports" ident_list "{" definition_list "}" -> module
    | "from" expression "import" ident_list ";"                   -> import
    | "type" IDENT "=" type ";"                                   -> type_definition

?definition_list:                                                 -> empty
    | definition definition_list                                  -> push
    
arete: definition_list

%ignore COMMENT
%ignore LINECOMMENT
%ignore WS
