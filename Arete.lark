DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
IDENT: (UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT|/[₀₁₂₃₄₅₆₇₈₉!?]/)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+
LINECOMMENT: "//" /[^\n]*/ NEWLINE
COMMENT: /\/\*([^\*]|\*+[^\/])*\*+\//

?exp: exp_logic "?" exp ":" exp                  -> condition
    | "var" param "=" init "in" exp              -> let
    | exp_logic

?exp_logic: exp_logic "and" exp_cmp              -> and
    | exp_logic "or" exp_cmp                     -> or
    | exp_cmp			                  
				                  
?exp_cmp: exp_cmp "==" exp_add                   -> equal
    | exp_cmp "!=" exp_add                       -> not_equal
    | exp_cmp "<" exp_add                        -> less
    | exp_cmp ">" exp_add                        -> greater
    | exp_cmp "<=" exp_add                       -> less_equal
    | exp_cmp ">=" exp_add                       -> greater_equal
    | exp_add

?exp_add: exp_add "+" exp_med      -> add
    | exp_add "-" exp_med          -> sub
    | exp_med

?exp_med: exp_med "/" exp_hi       -> div
    | exp_med "*" exp_hi       -> mul
    | exp_hi

?exp_hi: INT                                     -> int
    | "is_null" "(" exp ")"                      -> is_null
    | "null"                                     -> null
    | "split" "(" exp ")"                        -> split
    | "join" "(" exp "," exp ")"                 -> join
    | "permission" "(" exp ")"                   -> permission
    | IDENT                                      -> var
    | exp_hi "[" exp "]"                         -> index
    | exp_hi "." IDENT                           -> member
    | "-" exp_hi                                 -> neg
    | "not" exp_hi                               -> not
    | "(" exp ")"                                -> paren
    | "function" "(" param_list ")" block        -> lambda
    | "new" init_list                            -> new
    | exp_hi "(" init_list ")"                   -> call
    | "true"                                     -> true
    | "false"                                    -> false
      
?stmt: exp "=" init ";"                          -> write
    | exp "<-" exp "of" exp ";"                  -> transfer
    | "!" exp ";"                          -> expr
    | "delete" exp ";"                           -> delete
    | "assert" exp ";"                           -> assert
    | "if" "(" exp ")" block                     -> if
    | "if" "(" exp ")" block "else" block        -> if_else
    | block

?stmt_list: "var" param "=" init ";" stmt_list   -> var_init
    | stmt stmt_list                             -> seq
    | stmt                                       -> last_stmt
    | "return" exp ";"                           -> return

?block: "{" stmt_list "}"                        -> block

?exp_list:                                       -> empty
    | exp                                        -> single
    | exp "," exp_list                           -> push

?init: exp                                       -> default_init
    | exp "of" exp                               -> frac_init
				                 
?init_list:                                      -> empty
    | init                                       -> single
    | init "," init_list                         -> push
				                 
param: IDENT                                     -> read
    | "!" IDENT                                  -> write
				                 
?param_list:                                     -> empty
    | param                                      -> single
    | param "," param_list                       -> push

?ident_list:                                     -> empty
    | IDENT                                      -> single
    | IDENT "," ident_list                       -> push
    
?decl: "var" IDENT "=" exp ";"                   -> global
    | "function" IDENT "(" param_list ")" block  -> function
    | "module" IDENT "exports" ident_list "{" decl_list "}" -> module

?decl_list:                                      -> empty
    | decl decl_list                             -> push
    
arete: decl_list

%ignore COMMENT
%ignore LINECOMMENT
%ignore WS
