DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
IDENT: (UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT|/[₀₁₂₃₄₅₆₇₈₉]/)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+
COMMENT: "//" /[^\n]*/ NEWLINE

?ret_priv:                       -> return_read
         | "->" "!"              -> return_write

?exp: exp_add

?exp_add: exp "+" exp_hi         -> add
        | exp "-" exp_hi         -> sub
        | exp_hi
    
exp_hi: INT                      -> int
      | IDENT                    -> var
      | "-" exp_hi               -> neg
      | "*" exp_hi               -> deref
      | "(" exp ")"              -> paren
      | "function" param_list ret_priv "{" stmt "}" -> lambda
      | exp_hi "(" exp_list ")"  -> call
      | "new" init               -> new
      | "⟨" init_list "⟩"        -> tuple
      | exp_hi "[" exp "]"       -> index
      | "true"                   -> true
      | "false"                  -> false
      
?exp_list:                  -> empty
      | exp                 -> single
      | exp "," exp_list    -> push

?init: exp                       -> read_init
    | "!" exp                    -> write_init

?init_list:                  -> empty
      | init                 -> single
      | init "," init_list   -> push

param: IDENT                 -> read
     | "!" IDENT             -> write

?param_list:                     -> empty
     | param                     -> single
     | param "," param_list      -> push

?pat: "⟨" pat_list "⟩"            -> tuple_pat
    | IDENT                       -> read_pat
    | "!"     IDENT               -> write_pat
    | "_"                         -> wildcard_pat

?pat_list:                        -> empty
    | pat                         -> single
    | pat "," pat_list            -> push

?case: "case" pat ":" stmt        -> case

?case_list: "|" case              -> single
   | "|" case case_list           -> push
   
?basic_stmt: IDENT ":=" exp ";"   -> write
    | exp ";"                     -> expr
    | "{" stmt "}"                -> block
    | "delete" exp ";"            -> delete

?stmt: "var" param "=" exp ";" stmt   -> var_init
    | "return" exp ";"                 -> return
    | basic_stmt stmt                  -> seq
    |                                  -> pass
    | "match" exp case_list            -> match
    | "if" exp "then" stmt "else" stmt -> if

arete: stmt

%ignore COMMENT
%ignore WS
