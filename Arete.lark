DIGIT: /[0-9]/
INT: DIGIT+
UPPER: /[A-Z]/
LOWER: /[a-z]/
IDENT: (/_/|UPPER|LOWER) (/_/|UPPER|LOWER|DIGIT)*
NEWLINE: (/\r/? /\n/)+
WS: /[ \t\f\r\n]/+

?exp: exp_add

?exp_add: exp "+" exp_hi         -> add
        | exp "-" exp_hi         -> sub
        | exp_hi
    
exp_hi: INT                      -> int
      | IDENT                    -> var
      | "-" exp_hi               -> neg
      | "*" exp_hi               -> deref
      | "(" exp ")"              -> paren
      | "fn" param_list "{" stmt "}" -> lambda
      | exp_hi "(" exp_list ")"  -> call
      | "new" exp                -> new
      
?exp_list:                       -> empty
         | exp_non_empty

exp_non_empty: exp              -> single
      | exp "," exp_non_empty   -> push

?param_list:                -> empty
      | param_non_empty

param: IDENT               -> share
     | "take" IDENT        -> take
     | "borrow" IDENT      -> borrow

param_non_empty: param           -> single
     | param "," param_non_empty -> push

?stmt: "var" IDENT "=" exp ";" stmt    -> init_share
    | "take" IDENT "=" exp ";" stmt    -> init_take
    | "borrow" IDENT "=" exp ";" stmt  -> init_borrow
    | exp ":=" exp ";" stmt            -> write
    | exp ";" stmt                     -> expr
    | "return" exp ";"                 -> return

arete: stmt

%ignore WS
